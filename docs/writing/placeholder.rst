Platzhalter
===========

In diesem Abschnitt wird erkl√§rt, wie Platzhaltervariablen in Befehlen und
Codebeispielen formatiert werden soll.

Platzhalter in Beispielcode und Befehlen stellen Werte dar, die beim
Verwenden des Codes ersetzt werden m√ºssen. Platzhalter in Beispielausgaben
k√∂nnen die Werte auch variieren. Im Allgemeinen hat ein Platzhalter einen
beschreibenden Namen als Standardwert.

Der Platzhalter :samp:`PROJECT_{ID}` steht f√ºr eine beispielhafte
Projektbezeichnung, die mit ``PROJECT_`` beginnt, gefolgt von einer
variablen ID.

Beim Platzhalter :samp:`{HTTP_RESPONSE_CODE}` wird signalisiert, dass ein
HTTP-Antwortcode zwischen ``100`` und ``599`` erwartet wird.

Text f√ºr Platzhaltervariablen
-----------------------------

* Verwendet Gro√übuchstaben mit Unterstrich als Trennzeichen.

  * üëç :file:`https://cusy.io/{LANGUAGE_CODE}/`
  * üëé :file:`https://cusy.io/LANGUAGE_CODE/`
  * üëé :file:`https://cusy.io/{language-code}/`
  * üëé :file:`https://cusy.io/{LanguageCode}/`

* Wenn der Kontext, in dem ihr Platzhaltervariablen verwenden wollt,
  Gro√übuchstaben und Unterstriche missverst√§ndlich sein k√∂nnen, dann verwendet
  etwas anderes, aber seid intern konsistent.

* Verwendet keine Possessivpronomen in Platzhaltern.

  * üëé :file:`https://cusy.io/{MY_LANGUAGE}/`
  * üëé :file:`https://cusy.io/{YOUR_LANGUAGE}/`

Erl√§utert Platzhalter
---------------------

Wenn ihr einen Platzhalter in Text oder Code verwendet, f√ºgt bei der ersten
Verwendung eine Erkl√§rung f√ºr den Platzhalter ein. Wenn nach der Verwendung
dieses Platzhalters noch weitere Schritte und andere Platzhalter folgen, k√∂nnt
ihr sie auch alle auf einmal erkl√§ren.

Verwendet bei Prozeduren die folgende Reihenfolge:

#. Erkl√§rt, was gemacht werden soll
#. Nennt den Befehl
#. Erl√§utert den Platzhalter
#. Erl√§utert den Befehl bei Bedarf ausf√ºhrlicher
#. F√ºhrt die Ausgabe auf, falls erforderlich
#. Erl√§utert ggf. die Ausgabe

* üëç

  #. Damit euch die Spack-Umgebung zur Verf√ºgung steht, m√ºsst ihr folgendes
     in die :file:`~/.bashrc` oder :file:`~/.profile` eingetragen:

     .. code-block:: console

        export SPACK_ROOT=~/spack
        . $SPACK_ROOT/share/spack/setup-env.sh

  #. :envvar:`SPACK_ROOT` gibt dabei den Pfad zu eurer Spack-Installation an.

     :envvar:`.` definiert den Pfad zur Datei :file:`setup-env.sh`, wodurch ihr
     zuk√ºnftig die Spack-Befehle direkt in eurer Konsole aufrufen k√∂nnt.

  #. Die ge√§nderte Konfiguration wird nun √ºbernommen mit ``source``,
     :abbr:`z.B. (zum Beispiel)` mit:

     .. code-block:: console

        $ source ~/.bashrc

  #. Schlie√ülich k√∂nnt ihr eure Shell-Konfiguration √ºberpr√ºfen, :abbr:`z.B.
     (zum Beispiel)`:

     .. code-block:: console

        $ spack compiler find
        ==> Found no new compilers
        ==> Compilers are defined in the following files:
            /Users/veit/.spack/darwin/compilers.yaml

  #. ``spack`` konnte direkt im Pfad aufgerufen werden und auch die
     Direktive :samp:`compiler` war verf√ºgbar. Damit sind die Pfadangaben in der
     Shell-Konfiguration richtig und wirksam.

Platzhaltervariablen in Sphinx
------------------------------

Sphinx unterscheidet die folgenden Platzhaltervariablen:

.. rst:role:: envvar

    Umgebungsvariable, die auch einen Verweis auf die passende
    :rst:dir:`envvar`-Direktive erzeugt, falls sie existiert.

.. rst:role:: file

    Der Name einer Datei oder eines Verzeichnisses. Geschweifte Klammern k√∂nnen
    verwendet werden, um :abbr:`z.B. (zum Beispiel)` einen variablen Teil
    anzugeben::

        ‚Ä¶ is installed in :file:`/usr/lib/python3.{x}/site-packages` ‚Ä¶

    In der generierten HTML-Dokumentation wird das ``x`` mit``em .pre``
    besonders ausgezeichnet und kursiv dargestellt, um zu zeigen, dass es durch
    die spezifische Python-Version ersetzt werden soll.

.. rst:role:: makevar

    Der Name einer :command:`make`-Variable

.. rst:role:: samp

    Textbeispiel, wie :abbr:`z.B. (zum Beispiel)` Code, innerhalb dessen
    geschweifte Klammern verwendet werden k√∂nnen, um einen variablen Teil
    anzuzeigen, wie in :rst:role:`file` oder in ``:samp:`print 1+{variable}```,
    in denen der variable Teil hervorgehoben werden.

    Ab Sphinx‚â•1.8 k√∂nnen geschweifte Klammern mit einem Backslash (``\``)
    angezeigt werden.

.. note::
    .. rst:role:: content

    Diese Rolle hat standardm√§√üig keine besondere Bedeutung. Ihr k√∂nnt sie daher
    f√ºr alles M√∂gliche zu verwenden, :abbr:`z.B. (zum Beispiel)` auch f√ºr
    Variablennamen.
